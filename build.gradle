//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
buildscript {
    dependencies {
        classpath "com.modrinth.minotaur:Minotaur:${libs.versions.minotaur.get()}"
        classpath "com.github.breadmoirai:github-release:${libs.versions.githubRelease.get()}"
    }
}


plugins {
    id 'maven-publish'
    alias libs.plugins.loom
}

version = "$project.baseVersion+$project.branch"
archivesBaseName = project.name
group = 'garden.hestia'

repositories {
    maven { url 'https://repo.sleeping.town/' }
    mavenLocal()
}

dependencies {
    minecraft libs.mc
    mappings variantOf(libs.yarn) { classifier "v2" }
    modImplementation libs.fl
    modImplementation libs.fapi
    implementation libs.kaleidoConfig
    modImplementation libs.surveyor

    include libs.surveyor
}

processResources {
    final Map<String, String> map = [
        "version" : version.toString(),
        "mc"      : libs.versions.mc.get(),
        "fl"      : libs.versions.fl.get(),
        "fapi"    : libs.versions.fapi.get(),
        "surveyor": libs.versions.surveyor.get()
    ]

    inputs.properties(map)
    filesMatching('*.mod.json') { expand(map) }
    filesMatching('mods.toml') { expand(map) }

    from("src/main/resources/mods.toml") {
        rename { "META-INF/mods.toml" }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE.txt") {
        rename { "${it}_${archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

if (System.getenv("MODRINTH_TOKEN")) {
    apply plugin: "com.modrinth.minotaur"
    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = 'hoofprint'
        versionNumber = project.version
        versionName = baseVersion
        versionType = 'release'
        uploadFile = remapJar
        gameVersions = [libs.versions.mc.get()]
        loaders = ['quilt', 'fabric', 'forge']
        detectLoaders = false
        dependencies {
            required.version libs.fapi.get().getName(), libs.versions.fapi.get()
            embedded.version libs.surveyor.get().getName(), libs.versions.surveyor.get()
        }
        changelog = rootProject.file("CHANGELOG.md").text + "\n\nChangelog: https://github.com/HestiMae/hoofprint/releases/tag/v$baseVersion"
        syncBodyFrom = rootProject.file("README.md").text
    }
}

if (System.getenv("GITHUB_TOKEN")) {
    apply plugin: "com.github.breadmoirai.github-release"
    githubRelease {
        token System.getenv("GITHUB_TOKEN")
        owner "HestiMae"
        repo "hoofprint"
        tagName "v$baseVersion"
        releaseName baseVersion
        targetCommitish defaultBranch
        draft false
        prerelease false
        releaseAssets remapJar.archiveFile
        allowUploadToExisting true
        generateReleaseNotes true
        body rootProject.file("CHANGELOG.md").text + "\n"
    }
    tasks.githubRelease.dependsOn remapJar
}

if (System.getenv("MODRINTH_TOKEN") && System.getenv("GITHUB_TOKEN")) {
    tasks.register("fullRelease") {
        group "publishing"
        dependsOn "githubRelease"
        dependsOn "modrinth"
    }
}
